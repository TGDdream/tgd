引用：
(1)基本概念
int a=5;
int &k=a; //k是a的引用

(2)引用作为函数参数
void swap(int &x,int &y)
{
	int temp =x;
	x = y;
	y = temp;
}
int main()
{
	int i=10,j=20;
	swap(i,j);
	cout<<i<<","<<j<<endl;
	return 0;
}
结果：20,10;
总结：引用作为函数参数时，形参对应实参的别名，形参的交换也就是实参的交换。
使用指针参数和引用参数都能达到数据交换的目的，但引用参数更为直观，方便。

(3)使用引用返回函数值
int &min(int &m,int &n)
{
	return m<n?m:n;
}
int main()
{
	int x=10,y=20;
	min(x,y)=0;
	cout<<x<<","<<y<<endl;
	return 0;
}
结果：0,20
总结：此程序中，通过min函数返回m的引用，而m是x的引用，最后x被赋值0。
///////////////////////////////////////////////////////////////////////////////
const 与 指针：
1）指向常量的指针
int u=3;
const int max=1;
const int *p=&u;
指针指向的对象的值不可修改，指针可改变。

2）常量型指针
int u=10;
const int max=10;
int * const p1=&u;
指针值不能改变，且必须在定义时初始化。其指向的是变量。

3）指向常量的常量型指针
int u=10;
const int max=10;
const int * const p1=&u;
指针值和指向对象的值都不能改变
///////////////////////////////////////////////////////////////////////////////////////

复制构造函数调用的3种情况：
1.用类的对象去初始化该类的另一个对象时。
2.函数的形参是类的对象，调用函数进行形参和实参的结合时。
3.函数的返回值是类的对象，函数执行完返回调用者时。

///////////////////////////////////////////////////////////////////////////////////////
静态数据成员要在类外进行初始化：int student::number=0;
静态成员函数可以实现在建立任何对象之前处理静态数据成员。
////////////////////////////////////////////////////////////////////////////////////////
const
常对象的数据成员为常数据成员，不能被改变值。
常对象的成员函数不自动成为常成员函数，且常对象不能调用非常成员函数。
常数据成员必须通过构造函数的成员初始化列表的方式进行初始化。包含常数据成员的类不能使用默认构造函数。
常成员函数的声明：例：void Disp() const{...};
一般的，如果一个成员函数只是引用数据成员的值而不是改变其值，就要声明为常成员函数。
注意：const可以参与区分重载函数。